# Default values for portus.
nameOverride: portus
portus:
  replicaCount: 1
  podAnnotations: {}
  updateStrategy: {}
    # rollingUpdate:
    #   maxSurge: 1
    #   maxUnavailable: 0
    # type: RollingUpdate
  fqdn: portus.registry.example.com
  # these need to match the values in docker-registry.configData
  dockerFqdn: docker.registry.example.com
  dockerS3Bucket: registry
  dockerRootDirectory: portus
  image:
    repository: opensuse/portus
    tag: 2.2
    pullPolicy: IfNotPresent
  cleanup:
    enabled: true
  config:
    signup: true  # If enabled, then users can signup with the signup form
    first_user_admin: true  # First user signing up will be admin
    delete: true  # Allow admins and owners to delete images and tags
    gravatar: true  # If enabled, then the profile picture will be picked from the Gravatar
    display_name: false  # Allow users to have different display names on the web site
    user_permission:
      change_visibility: true  # Allow users to change the visibility or their personal namespace
      manage_team: true  # Allow users to create/modify teams if they are an owner of it
      manage_namespace: true  # Allow users to create/modify namespaces if they are an owner of it
    email:
      from: "portus@example.com"
      name: "Portus"
      reply_to: "no-reply@example.com"
      smtp:
        enabled: false
        address: "smtp.example.com"
        port: 587
        domain: "example.com"
    ldap:
      enabled: false
      host: "ldap.example.com"
      port: 389
      method: "plain"
      base: ""
      filter: ""
      uid: "uid"
      authentication:
        enabled: false
        bind_dn: ""
      guess_email:
        enabled: false
        attr: ""
    registry:
      jwt_expiration_time: 5
      catalog_page: 100
  secrets:
    password: ""  # Randomly generated if omitted
    email:
      smtp:
        user_name: "username@example.com"
        password: "password"
    ldap:
      bind_password: ""

    db:
      host: "example-mariadb.default.svc.cluster.local"
      catalog: "portusdb"
      username: "portus"
      password: "portuspass"
  resources:
    limits:
      cpu: 500m
      memory: 768Mi
    requests:
      cpu: 100m
      memory: 384Mi
  ingress:
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # nginx config upstream requires https
      # ingress.kubernetes.io/secure-backends: "true"

    tls:
      # - hosts:
      #   - portus.registry.example.com
      #   secretName: portus.registry.example.com.tls

docker-registry:
  replicaCount: 2
  storage: "filesystem"
  tlsSecretName: "docker.registry.example.com"
  secrets:
    # https://github.com/docker/distribution/blob/master/docs/configuration.md#http
    haSharedSecret: ""  # Randomly generated if omitted
    s3:
      accessKey: ""
      secretKey: ""
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 100m
      memory: 100Mi
  configData:
    version: 0.1
    auth:
      token:
        realm: https://portus.registry.example.com/v2/token
        service: docker.registry.example.com
        issuer: portus.registry.example.com
        rootcertbundle: /etc/ssl/docker/tls.crt
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    http:
      addr: :5000
      host: docker.registry.example.com
      tls:
        certificate: /etc/ssl/docker/tls.crt
        key: /etc/ssl/docker/tls.key
      headers:
        X-Content-Type-Options: [nosniff]
      debug:
        addr: localhost:5001
    log:
      level: info
      fields:
        service: registry
    maintenance:
      uploadpurging:
        enabled: true
        age: 168h
        interval: 24h
        dryrun: false
      readonly:
        enabled: false
    notifications:
      endpoints:
      - name: portus
        url: https://portus.registry.example.com/v2/webhooks/events
        timeout: 3000ms
        threshold: 5
        backoff: 1s

##
## Minio chart configuration
##
minio:
  enabled: false
  imageTag: RELEASE.2017-07-24T18-27-35Z
  # Minio access/secret keys for the in-cluster S3 usage
  # Minio is not exposed publically
  serviceType: ClusterIP
  accessKey: portusadmin
  secretKey: portusadmin
  # Tag used by post-install hook to create bucket
  client:
    imageRepository: minio/mc
    imageTag: RELEASE.2017-06-15T03-38-43Z

##
## MariaDB chart configuration
##
mariadb:
  enabled: true
  serviceType: ClusterIP
  mariadbUser: portus
  ## MariaDB admin password
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  mariadbRootPassword: portusadmin
  mariadbPassword: portuspass
  mariadbDatabase: portusdb
  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    ## A manually manage Persistent Volume Claim
    ## Requires mariadb.persistence.enable: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass:
    accessMode: ReadWriteOnce
    size: 8Gi
